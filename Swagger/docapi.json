{
  "swagger": "2.0",
  "info": {
    "title": "TimeManager",
    "description": "Welcome to TimeManager's API documentation",
    "termsOfService": "http://example.com/terms/",
    "contact": {
      "email": "the4musketeers@epitech.eu"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "schemes": [
    "http",
    "https"
  ],
  "tags": [
    "Auth",
    "Security",
    "Bankaccount",
    "Download",
    "Product"
  ],
  "paths": {
    "/api/auth/_login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Login as user",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "description": ""
                },
                "password": {
                  "type": "string",
                  "description": ""
                }
              }
            }
          }
        ],
        "responses": {
          "success": {
            "description": "Response when the request succeeded",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "description": "The user id",
                      "example": 1
                    },
                    "jwt": {
                      "type": "string",
                      "description": "The JSON Web Token",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6Ikp..."
                    },
                    "ttl": {
                      "type": "number",
                      "description": "The token lifetime",
                      "example": 36000000
                    },
                    "expiresAt": {
                      "type": "number",
                      "description": "The token expiration date",
                      "example": 1589788400
                    }
                  }
                }
              }
            }
          },
          "security:user:invalid_credentials": {
            "description": "Response when the error security:user:invalid_credentials occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:invalid_credentials",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Invalid Username or Password"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          },
          "security:token:creation_failed": {
            "description": "Response when the error security:token:creation_failed occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:token:creation_failed",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Failed to generate new token"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/_logout": {
      "get": {
        "tags": [
          "Auth"
        ],
        "description": "Logout the current user and revoke his token",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "success": {
            "description": "Response when the request succeeded",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/_register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Register a new account",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "description": ""
                },
                "email": {
                  "type": "string",
                  "description": ""
                },
                "password": {
                  "type": "string",
                  "description": ""
                }
              }
            }
          }
        ],
        "responses": {
          "success": {
            "description": "Response when the request succeeded",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "description": "The user id",
                      "example": 1
                    },
                    "jwt": {
                      "type": "string",
                      "description": "The JSON Web Token",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6Ikp..."
                    },
                    "ttl": {
                      "type": "number",
                      "description": "The token lifetime",
                      "example": 36000000
                    },
                    "expiresAt": {
                      "type": "number",
                      "description": "The token expiration date",
                      "example": 1589788400
                    }
                  }
                }
              }
            }
          },
          "request:invalid:email_format": {
            "description": "Response when the error request:invalid:email_format occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "request:invalid:email_format",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "BadRequest",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Invalid email format"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 400
                    }
                  }
                }
              }
            }
          },
          "security:user:username_taken": {
            "description": "Response when the error security:user:username_taken occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:username_taken",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Username already taken"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          },
          "security:user:email_taken": {
            "description": "Response when the error security:user:email_taken occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:email_taken",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Email already taken"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          },
          "security:user:username_too_short": {
            "description": "Response when the error security:user:username_too_short occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:username_too_short",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Username too short, should be at least %s characters"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          },
          "security:user:password_too_short": {
            "description": "Response when the error security:user:password_too_short occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:password_too_short",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Password too short, should be at least %s characters"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          },
          "security:user:password_too_weak": {
            "description": "Response when the error security:user:password_too_weak occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:password_too_weak",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Password too weak, should include at least 1 Capital letter and 1 Number"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          },
          "security:user:creation_failed": {
            "description": "Response when the error security:user:creation_failed occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:creation_failed",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Failed to create user account"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/_checkToken": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Verify the validity of a token",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "jwt": {
                  "type": "string",
                  "description": "The JSON Web Token"
                }
              }
            }
          }
        ],
        "responses": {
          "success": {
            "description": "Response when the request succeeded",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "description": "The user id",
                      "example": 1
                    },
                    "ttl": {
                      "type": "number",
                      "description": "The token lifetime",
                      "example": 3600000
                    },
                    "expiresAt": {
                      "type": "number",
                      "description": "The token expiration date",
                      "example": 1589788400
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/_me": {
      "get": {
        "tags": [
          "Auth"
        ],
        "description": "Retrieve informations of the current user",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "success": {
            "description": "Response when the request succeeded",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "description": "The user id",
                      "example": 1
                    },
                    "email": {
                      "type": "string",
                      "description": "The user email",
                      "example": "email@gmail.com"
                    },
                    "username": {
                      "type": "string",
                      "description": "The user username",
                      "example": "username"
                    },
                    "role": {
                      "type": "string",
                      "description": "The user role",
                      "example": "user"
                    }
                  }
                }
              }
            }
          },
          "security:user:not_authenticated": {
            "description": "Response when the error security:user:not_authenticated occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:not_authenticated",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "User not authenticated"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/": {
      "put": {
        "tags": [
          "Auth"
        ],
        "description": "Update informations of the current user",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "The user email"
                },
                "username": {
                  "type": "string",
                  "description": "The user username"
                },
                "actualPassword": {
                  "type": "string",
                  "description": "The user's actual password"
                }
              }
            }
          }
        ],
        "responses": {
          "success": {
            "description": "Response when the request succeeded",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "description": "The user id",
                      "example": 1
                    },
                    "email": {
                      "type": "string",
                      "description": "The user email",
                      "example": "email@gmail.com"
                    },
                    "username": {
                      "type": "string",
                      "description": "The user username",
                      "example": "username"
                    },
                    "role": {
                      "type": "string",
                      "description": "The user role",
                      "example": "user"
                    }
                  }
                }
              }
            }
          },
          "security:user:not_authenticated": {
            "description": "Response when the error security:user:not_authenticated occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:not_authenticated",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "User not authenticated"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          },
          "security:user:email_taken": {
            "description": "Response when the error security:user:email_taken occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:email_taken",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Email already taken"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          },
          "security:user:username_taken": {
            "description": "Response when the error security:user:username_taken occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:username_taken",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Username already taken"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          },
          "security:user:invalid_credentials": {
            "description": "Response when the error security:user:invalid_credentials occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:invalid_credentials",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Invalid Username or Password"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          },
          "security:user:update_failed": {
            "description": "Response when the error security:user:update_failed occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:update_failed",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Failed to update user account informations"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Auth"
        ],
        "description": "Delete the current user",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "success": {
            "description": "Response when the request succeeded",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "security:user:not_authenticated": {
            "description": "Response when the error security:user:not_authenticated occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:not_authenticated",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "User not authenticated"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/_password": {
      "put": {
        "tags": [
          "Auth"
        ],
        "description": "Update the password of the current user",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "oldPassword": {
                  "type": "string",
                  "description": "The user's actual password"
                },
                "newPassword": {
                  "type": "string",
                  "description": "The user's new password"
                }
              }
            }
          }
        ],
        "responses": {
          "success": {
            "description": "Response when the request succeeded",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "description": "The user id",
                      "example": 1
                    },
                    "email": {
                      "type": "string",
                      "description": "The user email",
                      "example": "email@gmail.com"
                    },
                    "username": {
                      "type": "string",
                      "description": "The user username",
                      "example": "username"
                    },
                    "role": {
                      "type": "string",
                      "description": "The user role",
                      "example": "user"
                    }
                  }
                }
              }
            }
          },
          "security:user:not_authenticated": {
            "description": "Response when the error security:user:not_authenticated occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:not_authenticated",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "User not authenticated"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          },
          "security:user:invalid_credentials": {
            "description": "Response when the error security:user:invalid_credentials occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:invalid_credentials",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Invalid Username or Password"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          },
          "security:user:update_failed": {
            "description": "Response when the error security:user:update_failed occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:update_failed",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Failed to update user account informations"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          },
          "security:user:password_too_short": {
            "description": "Response when the error security:user:password_too_short occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:password_too_short",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Password too short, should be at least %s characters"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          },
          "security:user:password_too_weak": {
            "description": "Response when the error security:user:password_too_weak occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:password_too_weak",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Password too weak, should include at least 1 Capital letter and 1 Number"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/security/_list": {
      "get": {
        "tags": [
          "Security"
        ],
        "description": "List all the existing users",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "success": {
            "description": "Response when the request succeeded",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "array",
                  "example": [
                    {
                      "id": "number",
                      "username": "string",
                      "email": "string",
                      "role": "string"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/security/_list/_soft": {
      "get": {
        "tags": [
          "Security"
        ],
        "description": "List the usernames and ids of all the users",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "success": {
            "description": "Response when the request succeeded",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "array",
                  "example": [
                    {
                      "id": "number",
                      "username": "string"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/security/_roles": {
      "get": {
        "tags": [
          "Security"
        ],
        "description": "List all the existing roles",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "success": {
            "description": "Response when the request succeeded",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "array",
                  "example": [
                    "roleName1",
                    "roleName2",
                    "..."
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/security/{userId}": {
      "get": {
        "tags": [
          "Security"
        ],
        "description": "Retrieve the information of a given user",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "success": {
            "description": "Response when the request succeeded",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "description": "The id of the user",
                      "example": 1
                    },
                    "username": {
                      "type": "string",
                      "description": "The username of the user",
                      "example": "email@gmail.com"
                    },
                    "email": {
                      "type": "string",
                      "description": "The email of the user",
                      "example": "username"
                    },
                    "role": {
                      "type": "string",
                      "description": "The role of the user",
                      "example": "user"
                    }
                  }
                }
              }
            }
          },
          "security:user:with_id_not_found": {
            "description": "Response when the error security:user:with_id_not_found occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:with_id_not_found",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "User with id \"%s\" not found"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Security"
        ],
        "description": "Update the informations of a given user",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "description": "The new user username",
                  "example": "username"
                },
                "email": {
                  "type": "string",
                  "description": "The new user email",
                  "example": "email@gmail.com"
                }
              }
            }
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "success": {
            "description": "Response when the request succeeded",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "description": "The id of the user",
                      "example": 1
                    },
                    "username": {
                      "type": "string",
                      "description": "The username of the user",
                      "example": "email@gmail.com"
                    },
                    "email": {
                      "type": "string",
                      "description": "The email of the user",
                      "example": "username"
                    },
                    "role": {
                      "type": "string",
                      "description": "The role of the user",
                      "example": "user"
                    }
                  }
                }
              }
            }
          },
          "security:user:with_id_not_found": {
            "description": "Response when the error security:user:with_id_not_found occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:with_id_not_found",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "User with id \"%s\" not found"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          },
          "request:invalid:email_format": {
            "description": "Response when the error request:invalid:email_format occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "request:invalid:email_format",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "BadRequest",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Invalid email format"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 400
                    }
                  }
                }
              }
            }
          },
          "security:user:username_too_short": {
            "description": "Response when the error security:user:username_too_short occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:username_too_short",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Username too short, should be at least %s characters"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          },
          "security:user:email_taken": {
            "description": "Response when the error security:user:email_taken occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:email_taken",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Email already taken"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          },
          "security:user:username_taken": {
            "description": "Response when the error security:user:username_taken occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:username_taken",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Username already taken"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          },
          "security:user:update_failed": {
            "description": "Response when the error security:user:update_failed occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:update_failed",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Failed to update user account informations"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Security"
        ],
        "description": "Delete a given user",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "success": {
            "description": "Response when the request succeeded",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "boolean:",
                  "example": true
                }
              }
            }
          }
        }
      }
    },
    "/api/security/": {
      "post": {
        "tags": [
          "Security"
        ],
        "description": "Create a new user",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "description": "The username of the user",
                  "example": "username"
                },
                "email": {
                  "type": "string",
                  "description": "The email of the user",
                  "example": "email@gmail.com"
                },
                "password": {
                  "type": "string",
                  "description": "The password of the user",
                  "example": "password"
                },
                "role": {
                  "type": "string",
                  "description": "The role of the user",
                  "example": "user"
                }
              }
            }
          }
        ],
        "responses": {
          "success": {
            "description": "Response when the request succeeded",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "description": "The id of the user",
                      "example": 1
                    },
                    "username": {
                      "type": "string",
                      "description": "The username of the user",
                      "example": "email@gmail.com"
                    },
                    "email": {
                      "type": "string",
                      "description": "The email of the user",
                      "example": "username"
                    },
                    "role": {
                      "type": "string",
                      "description": "The role of the user",
                      "example": "user"
                    }
                  }
                }
              }
            }
          },
          "request:invalid:email_format": {
            "description": "Response when the error request:invalid:email_format occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "request:invalid:email_format",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "BadRequest",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Invalid email format"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 400
                    }
                  }
                }
              }
            }
          },
          "security:user:username_too_short": {
            "description": "Response when the error security:user:username_too_short occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:username_too_short",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Username too short, should be at least %s characters"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          },
          "security:user:password_too_short": {
            "description": "Response when the error security:user:password_too_short occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:password_too_short",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Password too short, should be at least %s characters"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          },
          "security:user:password_too_weak": {
            "description": "Response when the error security:user:password_too_weak occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:password_too_weak",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Password too weak, should include at least 1 Capital letter and 1 Number"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          },
          "security:user:email_taken": {
            "description": "Response when the error security:user:email_taken occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:email_taken",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Email already taken"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          },
          "security:user:username_taken": {
            "description": "Response when the error security:user:username_taken occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:username_taken",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Username already taken"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          },
          "security:user:invalid_role": {
            "description": "Response when the error security:user:invalid_role occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:invalid_role",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "BadRequest",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Invalid role \"%s\", expected %s"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 400
                    }
                  }
                }
              }
            }
          },
          "security:user:creation_failed": {
            "description": "Response when the error security:user:creation_failed occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:creation_failed",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Failed to create user account"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/security/{userId}/_password": {
      "put": {
        "tags": [
          "Security"
        ],
        "description": "Update the password of a given user",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "password": {
                  "type": "string",
                  "description": "The new user password",
                  "example": "password"
                }
              }
            }
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "success": {
            "description": "Response when the request succeeded",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "description": "The id of the user",
                      "example": 1
                    },
                    "username": {
                      "type": "string",
                      "description": "The username of the user",
                      "example": "email@gmail.com"
                    },
                    "email": {
                      "type": "string",
                      "description": "The email of the user",
                      "example": "username"
                    },
                    "role": {
                      "type": "string",
                      "description": "The role of the user",
                      "example": "user"
                    }
                  }
                }
              }
            }
          },
          "security:user:with_id_not_found": {
            "description": "Response when the error security:user:with_id_not_found occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:with_id_not_found",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "User with id \"%s\" not found"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          },
          "security:user:password_too_short": {
            "description": "Response when the error security:user:password_too_short occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:password_too_short",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Password too short, should be at least %s characters"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          },
          "security:user:password_too_weak": {
            "description": "Response when the error security:user:password_too_weak occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:password_too_weak",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Password too weak, should include at least 1 Capital letter and 1 Number"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          },
          "security:user:update_failed": {
            "description": "Response when the error security:user:update_failed occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:update_failed",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Failed to update user account informations"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/security/{userId}/_role": {
      "put": {
        "tags": [
          "Security"
        ],
        "description": "Update the role of a given user",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "role": {
                  "type": "string",
                  "description": "The new user role",
                  "example": "user"
                }
              }
            }
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "success": {
            "description": "Response when the request succeeded",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "description": "The id of the user",
                      "example": 1
                    },
                    "username": {
                      "type": "string",
                      "description": "The username of the user",
                      "example": "email@gmail.com"
                    },
                    "email": {
                      "type": "string",
                      "description": "The email of the user",
                      "example": "username"
                    },
                    "role": {
                      "type": "string",
                      "description": "The role of the user",
                      "example": "user"
                    }
                  }
                }
              }
            }
          },
          "security:user:with_id_not_found": {
            "description": "Response when the error security:user:with_id_not_found occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:with_id_not_found",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "User with id \"%s\" not found"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          },
          "security:user:invalid_role": {
            "description": "Response when the error security:user:invalid_role occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:invalid_role",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "BadRequest",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Invalid role \"%s\", expected %s"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 400
                    }
                  }
                }
              }
            }
          },
          "security:user:update_failed": {
            "description": "Response when the error security:user:update_failed occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:user:update_failed",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Failed to update user account informations"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/bankaccount/_admin/{accountId}": {
      "get": {
        "tags": [
          "Bankaccount"
        ],
        "description": "Get the BankAccount informations",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "success": {
            "description": "Response when the request succeeded",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "balance": {
                      "type": "number",
                      "description": "The balance of the BankAccount.",
                      "example": 1
                    },
                    "id": {
                      "type": "string",
                      "description": "The id of the BankAccount.",
                      "example": "cc371db2-8f9a-4f28-bb4d-2220906b371e"
                    },
                    "vcc": {
                      "type": "string",
                      "description": "The BankAccount visual cryptographic code",
                      "example": "6666"
                    }
                  }
                }
              }
            }
          },
          "api:bankAccount:not_found": {
            "description": "Response when the error api:bankAccount:not_found occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "api:bankAccount:not_found",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "ApiError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Bank account not found"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 504
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Bankaccount"
        ],
        "description": "Get the BankAccount informations",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "balance": {
                  "type": "number",
                  "description": "The new BankAccount balance."
                }
              }
            }
          },
          {
            "in": "path",
            "name": "accountId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "success": {
            "description": "Response when the request succeeded",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "balance": {
                      "type": "number",
                      "description": "The balance of the BankAccount.",
                      "example": 0
                    }
                  }
                }
              }
            }
          },
          "api:bankAccount:not_found": {
            "description": "Response when the error api:bankAccount:not_found occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "api:bankAccount:not_found",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "ApiError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Bank account not found"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 504
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Bankaccount"
        ],
        "description": "Delete a BankAccount",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "required": true,
            "type": "string:\"cc371db2-8f9a-4f28-bb4d-2220906b371e\""
          }
        ],
        "responses": {
          "success": {
            "description": "Response when the request succeeded",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          }
        }
      }
    },
    "/api/bankaccount/{accountId}/{vcc}": {
      "get": {
        "tags": [
          "Bankaccount"
        ],
        "description": "Get the BankAccount informations",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "vcc",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "success": {
            "description": "Response when the request succeeded",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "balance": {
                      "type": "number",
                      "description": "The balance of the BankAccount.",
                      "example": 0
                    }
                  }
                }
              }
            }
          },
          "api:bankAccount:verification_failed": {
            "description": "Response when the error api:bankAccount:verification_failed occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "api:bankAccount:verification_failed",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Could not verify bank account details"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          },
          "api:bankAccount:not_found": {
            "description": "Response when the error api:bankAccount:not_found occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "api:bankAccount:not_found",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "ApiError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Bank account not found"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 504
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/bankaccount/_admin/_create": {
      "post": {
        "tags": [
          "Bankaccount"
        ],
        "description": "Create a new BankAccount",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "balance": {
                  "type": "number",
                  "description": "The balance of the BankAccount.",
                  "example": 0
                }
              }
            }
          }
        ],
        "responses": {
          "success": {
            "description": "Response when the request succeeded",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "balance": {
                      "type": "number",
                      "description": "The balance of the BankAccount.",
                      "example": 0
                    },
                    "id": {
                      "type": "string",
                      "description": "The BankAccount id.",
                      "example": "cc371db2-8f9a-4f28-bb4d-2220906b371e"
                    },
                    "vcc": {
                      "type": "string",
                      "description": "The BankAccount visual cryptographic code.",
                      "example": "6666"
                    }
                  }
                }
              }
            }
          },
          "api:bankAccount:creation_failed": {
            "description": "Response when the error api:bankAccount:creation_failed occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "api:bankAccount:creation_failed",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Could not create a new bank account"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/download/client.apk": {
      "get": {
        "tags": [
          "Download"
        ],
        "description": "Initiate APK Downloading",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "success": {
            "description": "Response when the request succeeded",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "FileDownload",
                  "example": {}
                }
              }
            }
          }
        }
      }
    },
    "/api/product/{code}": {
      "get": {
        "tags": [
          "Product"
        ],
        "description": "Get product informations by code",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "raw": {
                  "type": "boolean",
                  "description": "Add raw product informations.",
                  "example": false
                }
              }
            }
          },
          {
            "in": "path",
            "name": "code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "success": {
            "description": "Response when the request succeeded",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "The product barcode",
                      "example": "20020392"
                    },
                    "name": {
                      "type": "string",
                      "description": "The product name",
                      "example": "Sirop de grenadine"
                    },
                    "image": {
                      "type": "string",
                      "description": "The url of the product image",
                      "example": "https://www..."
                    },
                    "ingredients": {
                      "type": "string",
                      "description": "The url of the product ingredients image",
                      "example": "https://www...."
                    },
                    "brand": {
                      "type": "string",
                      "description": "The product's brand",
                      "example": "Plein Sud"
                    },
                    "price": {
                      "type": "number",
                      "description": "The product's price",
                      "example": 4.2
                    },
                    "nutriScore": {
                      "type": "string",
                      "description": "The product nutriScore from [a, b, c, d, e]",
                      "example": "a"
                    },
                    "raw": {
                      "type": "object",
                      "description": "The raw product details"
                    }
                  }
                }
              }
            }
          },
          "api:product:not_found": {
            "description": "Response when the error api:product:not_found occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "api:product:not_found",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "ApiError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Product \"%s\" not found"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 504
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/product/pay": {
      "post": {
        "tags": [
          "Product"
        ],
        "description": "Buy every product listed",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "products": {
                  "type": "Array<{}>",
                  "description": "A list of products.",
                  "example": {
                    "code": "20020392",
                    "quantity": 42
                  }
                },
                "accountId": {
                  "type": "string",
                  "description": "BankAccount ID.",
                  "example": "cc371db2-8f9a-4f28-bb4d-2220906b371e"
                },
                "vcc": {
                  "type": "string",
                  "description": "BankAccount visual cryptographic code.",
                  "example": "6666"
                }
              }
            }
          }
        ],
        "responses": {
          "success": {
            "description": "Response when the request succeeded",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "request:invalid:missing_argument": {
            "description": "Response when the error request:invalid:missing_argument occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "request:invalid:missing_argument",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "BadRequest",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Missing argument \"%s\""
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 400
                    }
                  }
                }
              }
            }
          },
          "security:transaction:rejected": {
            "description": "Response when the error security:transaction:rejected occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:transaction:rejected",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Transaction Rejected: %s"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          },
          "api:bankAccount:verification_failed": {
            "description": "Response when the error api:bankAccount:verification_failed occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "api:bankAccount:verification_failed",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Could not verify bank account details"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          },
          "api:bankAccount:not_found": {
            "description": "Response when the error api:bankAccount:not_found occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "api:bankAccount:not_found",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "ApiError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Bank account not found"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 504
                    }
                  }
                }
              }
            }
          },
          "security:transaction:insufficient_funds": {
            "description": "Response when the error security:transaction:insufficient_funds occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "security:transaction:insufficient_funds",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "SecurityError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Funds insufficient to complete transaction"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 502
                    }
                  }
                }
              }
            }
          },
          "api:product:not_found": {
            "description": "Response when the error api:product:not_found occurs",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "api:product:not_found",
                      "description": "Error ID"
                    },
                    "type": {
                      "type": "string",
                      "example": "ApiError",
                      "description": "Error Class Type"
                    },
                    "stack": {
                      "type": "string",
                      "description": "Error StackTrace",
                      "example": "Error at ..."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Product \"%s\" not found"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status Code",
                      "example": 504
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}